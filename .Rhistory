## read outcome data
outcomedata <- read.csv("outcome-of-care-measures.csv",stringsAsFactors=FALSE,na.string="Not Available")
##check that outcome is valid
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome,outcomelist)) {
stop("invalid outcome")
}
##create data frame containing only hospital names, state names and data on specified outcome
if(outcome == "heart attack") {x <- 11}
else if(outcome == "heart failure") {x <- 17}
else if(outcome == "pneumonia") {x <- 23}
selectdata <- outcomedata[,c(2,7,x)]
##remove NAs
good <- complete.cases(selectdata)
gooddata <- selectdata[good,]
#find the hospital with the requested rank in each state
names(gooddata)[1] <- "Hospital"
names(gooddata)[2] <- "State"
names(gooddata)[3] <- "Outcome"
sorteddata <- gooddata[order(gooddata$State,gooddata$Outcome,gooddata$Hospital),]
if(num == "best") {num <- 1}
else if (num == "worst") {num <- nrow(gooddata)}
f <- as.factor(gooddata$State)
l <- split(gooddata,f)
x <- sapply(l, function(a) a[num,1])
return(x)
}
rankall("pneumonia",1)
rankall <- function(outcome, num) {
## read outcome data
outcomedata <- read.csv("outcome-of-care-measures.csv",stringsAsFactors=FALSE,na.string="Not Available")
##check that outcome is valid
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome,outcomelist)) {
stop("invalid outcome")
}
##create data frame containing only hospital names, state names and data on specified outcome
if(outcome == "heart attack") {x <- 11}
else if(outcome == "heart failure") {x <- 17}
else if(outcome == "pneumonia") {x <- 23}
selectdata <- outcomedata[,c(2,7,x)]
##remove NAs
good <- complete.cases(selectdata)
gooddata <- selectdata[good,]
#find the hospital with the requested rank in each state
names(gooddata)[1] <- "Hospital"
names(gooddata)[2] <- "State"
names(gooddata)[3] <- "Outcome"
sorteddata <- gooddata[order(gooddata$State,gooddata$Outcome,gooddata$Hospital),]
if(num == "best") {num <- 1}
else if (num == "worst") {num <- nrow(gooddata)}
f <- as.factor(gooddata$State)
l <- split(gooddata,f)
x <- sapply(l, function(a) a[num,1:2])
return(x)
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num) {
## read outcome data
outcomedata <- read.csv("outcome-of-care-measures.csv",stringsAsFactors=FALSE,na.string="Not Available")
##check that outcome is valid
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome,outcomelist)) {
stop("invalid outcome")
}
##create data frame containing only hospital names, state names and data on specified outcome
if(outcome == "heart attack") {x <- 11}
else if(outcome == "heart failure") {x <- 17}
else if(outcome == "pneumonia") {x <- 23}
selectdata <- outcomedata[,c(2,7,x)]
##remove NAs
good <- complete.cases(selectdata)
gooddata <- selectdata[good,]
#find the hospital with the requested rank in each state
names(gooddata)[1] <- "Hospital"
names(gooddata)[2] <- "State"
names(gooddata)[3] <- "Outcome"
sorteddata <- gooddata[order(gooddata$State,gooddata$Outcome,gooddata$Hospital),]
if(num == "best") {num <- 1}
else if (num == "worst") {num <- nrow(gooddata)}
f <- as.factor(gooddata$State)
l <- split(gooddata,f)
x <- sapply(l, function(a) a[num,1])
return(x)
}
head(rankall("heart attack",20),10)
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- C(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
swirl()
bye()
swirl()
bye()
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z)100)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
print(my_data)
my_data
0/0
Inf - Inf
nosim <- 1000
n <- 10
?matrix
x <- rnorm(nosim * n)
m <- matrix(x, nosim)
dim(m)
?apply
c <- apply(m,1,mean)
sd <- sd(c)
sd
nosim <- 1000
n <- 10
?sample
sample(1:6,1,replace=TRUE)
sample(1:6,1,replace=TRUE)
?sapply
sapply(1:100,sample(1:6,1,replace=TRUE))
?replicate
pnorm(.95)
?pnorm
pnorm(95)
pnorm(1)
pnorm(2)
pnorm(1.96)
pnorm(1.96,lower.tail=FALSE)
pnorm(2.8,lower.tail=FALSE)
qnorm(p=.75,mean=1020,sd=50)
?ppois
ppois(3,10)
ppois(10,10)
ppois(20,10)
ppois(1,1)
ppois(10,1)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
x <- cumsum(rnorm(n))
setseed(0)
?set.seed
set.seed(0)
x <- rnorm(n)
set.seed(0)
y <- cumsum(rnorm(n))
set.seed(0)
means <- cumsum(rnorm(n))/(1:n)
y[1:10]
y[990:1000]
y[500:510]
means[1:10]
means[990:1000]
?plot
plot(means)
qnorm(.975)
pnorm(1.959964)
qnorm(.975)
phats <- rbinom(1000,prob=p,size=20)
phats <- rbinom(1000,prob=.5,size=20)
?rbinom
t <- rbinom(100, prob=.5)
rbinom(1,2)
rbinom(1,2,.5)
rbinom(100,1,.5)
rbinom(100,2,.5)
rbinom(100,6,.5)
mean(phats)
qnorm(.975)
pnorm(-1)
qnorm(.95)
1100+(qnorm(.95)*75)
dbinom(5,1,.5)
pbinom(5,1,.5)
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=FALSE)
pbinom(6, size=1, prob=.5, lower.tail=FALSE)
pbinom(6, size=8, prob=.5)
pbinom(3, size=5, prob=.5, lower.tail=FALSE)
?runif
runif(1000)
mean(runif(1000))
mean(runif(1000))
mean(runif(1000))
mean(runif(1000))
?ppois
ppois(10, lambda=15)
ppois(15,15)
ppois(100,100)
ppois(1000,1000)
ppois(1,1)
?qnorm
qnorm(.95, mean=1100, sd=7.5)
R.version.string
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.64
.64
mypdf
integrate(lower=0, upper=1.6)
integrate(mypdf, lower=0, upper=1.6)
sqrt(2)
(.997*.001)
((1-.985)*(1-.001))
.000997/(.000997+.014985)
swirl()
?ppois
ppois(10,15)
sessionInfo()
?ppois
ppois(100,5)
ppois(5,100)
qpois(5,5)
ppois(9,5)
ppois(18,10)
ppois(19,10)
ppois(99,50)
?t.test
?tq
?qt
qt(.025,8)
qnorm(.025)
qt(.975,8,lower.tail=FALSE)
qt(.975,8)
pt(-2.3,8)
qt(.975,18)
-2 +c(-1,1)*qt(.975,18)*.8*(2/10)^.5
-2 +C(-1,1)*qnorm(.975)*.0425^.5
-2 +c(-1,1)*qnorm(.975)*.0425^.5
2 +c(-1,1)*qnorm(.975)*.0425^.5
-4 +c(-1,1)*qt(.95,16)*sqrt(2.745)*(2/9)^.5
qt(.95,16)
qnorm(.95)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
a <- rexp(1000,.2)
hist(a)
?rexp
mne = NULL
for (i in 1 : 1000) mne = c(mne, mean(rexp(40),.2))
hist(mne)
mean(mne)
mean(mns)
mean(a)
qnorm(.95)
qnorm(.975)
z <- qnorm(.95)
pnorm(30+z, mean=30, sd=1, lower.tail=FALSE)
pnorm(z)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
?matrix
?data.frame
df <- data.frame(bl=c(130,148,150,148,135), w2=c(132,135,151,146,130))
View(df)
?t.test
t.test(df$bl, df$w2, paired=TRUE)
t.test(df$bl-df$w2)
library(dplyr)
df <- mutate(df, dif = w2-bl)
View(df)
mn <- mean(df$dif)
sd <- sd(df$dif)
n <- 5
mn + c(-1, 1) * qt(.975, n-1) * sd / sqrt(n)
data(sleep)
sleep
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
t.test(difference)
sd(dif)
sd(df$dif)
mean(df$dif)
?tq
?qt
df <- data.frame(bl=c(140,148,150,148,135), w2=c(132,135,151,146,130))
t.test(df$bl-df$w2)
View(df)
df <- data.frame(bl=c(140,138,150,148,135), w2=c(132,135,151,146,130))
View(df)
t.test(df$bl-df$w2)
qt(.95,8)
qt(.05,8)
qt(.975,8)
?t.test
ppois(10,18)
ppois(10,17.87)
?qt
qt(.95,100)
qt(.975,100)
qt(.975,1000)
qt(.975,8)
qt(.995,8)
qt(.975,16)
qt(.995,16)
qt(.9995,16)
qnorm(.95)
mu0<-0
sigma <- .04
n <- 100
alpha <- .05
z <- qnorm(1-alpha)
mua=.01
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
power.t.test(n = 100, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
pnorm(.0165794)
pnorm(.0165794, mean=.01, sd=.004)
pnorm(.0065794,mean=.01,sd=.004,lower.tail=FALSE)
?qnorm
qnorm(.90,mean=.01,sd=.004,lower.tail=FALSE)
qnorm(.8037659,mean=.01,sd=.004,lower.tail=FALSE)
power.t.test(n = 180, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 160, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 140, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
sd <- sd(x)
8.58-m
-.73/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
?plot
beta1 <- sum(y*x)/sum(x*x)
library(ggplot2)
data(mtcars)
mtcars
lm(mtcars$mpg ~ mtcars$weight)
lm(mtcars$mpg ~ mtcars$wt)
lm(y ~ x)
xn <- mean(x)/sd(x)
yn <- mean(y)/sd(y)
lm(yn ~ xn)
xn <- (x-mean(x))/sd(x)
yn <- (y-mean(y))/sd(y)
lm(yn ~ xn)
plot(xn,yn)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
data(diamond)
library(UsingR)
data(diamond)
diamond
y <- diamond$price
x <- diamond$carat
n<-length(x)
fit<- lm(y~x)
fit
e <- resid(fit)
yhat<-predict(fit)
max(abs(e-y-yhat))
b <- e-y-yhat
rm(b)
max(abs(e-(y-yhat)))
setwd("C:/Users/eric6_000/Desktop/online courses/Coursera data science track/regmodsbook-master/regmodsbook-master/manuscript")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
fit <- lm(y~x)
fit
summary(fit)
n<- length(x)
e <- resid(fit)
sd(e)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
setwd("~/Rprojects/NWEAscripts")
list.files()
source("FormatClassAssignments.R")
source("FormatClassAssignments.R")
source("Fbaseline.R")
source("Fbaseline.R")
list.files()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
fit
summary(fit)
?qt
qt(2.325,7,lower.tail=TRUE)
pt(2.325,7,lower.tail=TRUE)
fit$resid
sd(fit$resid)
rsd <- sd(fit$resid)
rsd*9/7
rsd*8/7
resid(fit)
sqrt(sum(resid(fit)^2))/7
data(mtcars)
mtcars
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
plot(x=mtcars$wt,y=mtcars$mpg)
wt <- mtcars$wt
mpg <- mtcars$mpg
stdwt <- (wt-mean(wt))/sd(wt)
stdmpg <- (mpg-mean(mpg))/sd(mpg)
plot(x=stdwt,y=stdmpg)
fit1 <- lm(stdmpg ~ stdwt)
summary(fit1)
?mtcars
summary(fit)
mean(mtcars$wt)
mean(mtcars$mpg)
sumCoef <- summary(fit)$coefficient
sumCoef[1,1]
sumCoef[1, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
qt(.975, df = fit$df)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
data(mtcars)
mtcars
y <- mtcars$mpg
x <- mtcars$wt
n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2)
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit <- lm(y~x)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sigma*sqrt(1/n)
beta0 + beta1*mean(x)
p1 <- data.frame(predict(fit(newdata=mean(x), interval=("confidence"))))
p1 <- data.frame(predict(fit, newdata=mean(x), interval=("confidence")))
View(`p1`)
m <- mean(x)
p1 <- data.frame(predict(fit, newdata=m, interval=("confidence")))
View(`p1`)
?predict
m <- c(mean(x), 3.3, 3.4)
p1 <- data.frame(predict(fit, newdata=m, interval=("confidence")))
m <- mean(x)
m*beta1 + beta0
View(`p1`)
3*beta1 + beta0
sumCoef[2,1]*2 + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]*2
intonly <- sum((y-mean(y))^2)
intandslope <- sum(e^2)
intandslope/intonly
